<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星星堆满天</title>
  
  <subtitle>也不能比月圆</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-18T13:26:38.056Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux网络编程</title>
    <link href="http://example.com/2021/11/18/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/11/18/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/</id>
    <published>2021-11-18T13:17:05.990Z</published>
    <updated>2021-11-18T13:26:38.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p> 多进程服务器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888<span class="comment">/*侦听端口地址*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 2<span class="comment">/*侦听队列长度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_conn_server</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">ssize_t</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>];<span class="comment">/*数据的缓冲区*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;<span class="comment">/*循环处理过程*/</span></span><br><span class="line"> <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));<span class="comment">/*清空之前的buffer存的数据*/</span></span><br><span class="line">size = <span class="built_in">read</span>(s, buffer, <span class="number">1024</span>);<span class="comment">/*从套接字中读取数据放到缓冲区buffer中*/</span></span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>)&#123;<span class="comment">/*没有数据*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端已经断开了连接&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印收到的客户端的字符串*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client say:%s\n&quot;</span>,buffer);</span><br><span class="line"><span class="comment">/*构建响应字符，为接收到客户端字节的数量*/</span></span><br><span class="line"><span class="built_in">sprintf</span>(buffer, <span class="string">&quot;%ld bytes altogether\n&quot;</span>, size);</span><br><span class="line"><span class="built_in">write</span>(s, buffer, <span class="built_in">strlen</span>(buffer)+<span class="number">1</span>);<span class="comment">/*发给客户端,让客户端知道服务器端已经收到它的消息*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ss,sc;<span class="comment">/*ss为服务器的socket描述符，sc为客户端的socket描述符*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span><span class="comment">/*服务器地址结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span><span class="comment">/*客户端地址结构*/</span></span><br><span class="line"><span class="keyword">int</span> err;<span class="comment">/*返回值*/</span></span><br><span class="line"><span class="keyword">pid_t</span> pid;<span class="comment">/*分叉的进行ID*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*建立一个流式套接字*/</span><span class="comment">/*创建监听的套接字*/</span></span><br><span class="line">ss = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(ss &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置服务器地址*/</span><span class="comment">/*绑定本地的IP port*/</span></span><br><span class="line"><span class="built_in">bzero</span>(&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));<span class="comment">/*清零*/</span></span><br><span class="line">server_addr.sin_family = AF_INET;<span class="comment">/*协议族*/</span></span><br><span class="line">server_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">/*转换成大端*/</span><span class="comment">/*本地地址*/</span></span><br><span class="line">server_addr.sin_port = <span class="built_in">htons</span>(PORT);<span class="comment">/*服务器端口*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*绑定地址结构到套接字描述符*/</span></span><br><span class="line">err = <span class="built_in">bind</span>(ss, (struct sockaddr*)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置侦听*/</span></span><br><span class="line">err = <span class="built_in">listen</span>(ss, BACKLOG);<span class="comment">/*监听的文件描述符,同时能够检测到连接的最大数*/</span></span><br><span class="line"><span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;listen error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主循环过程*/</span></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line"><span class="keyword">socklen_t</span> addrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(struct sockaddr);</span><br><span class="line"></span><br><span class="line">sc = <span class="built_in">accept</span>(ss, (struct sockaddr*)&amp;client_addr, &amp;addrlen); </span><br><span class="line"><span class="comment">/*接收客户端连接*/</span></span><br><span class="line"><span class="keyword">if</span>(sc &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">/*结束本次循环*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*建立一个新的进程处理到来的连接*/</span></span><br><span class="line">pid = fork();<span class="comment">/*分叉进程*/</span></span><br><span class="line"><span class="keyword">if</span>( pid == <span class="number">0</span> )&#123;<span class="comment">/*子进程中*/</span></span><br><span class="line"><span class="built_in">process_conn_server</span>(sc);<span class="comment">/*处理连接*/</span></span><br><span class="line"><span class="built_in">close</span>(ss);<span class="comment">/*在子进程中关闭服务器的侦听*/</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">close</span>(sc);<span class="comment">/*在父进程中关闭客户端的连接*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多线程服务器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888<span class="comment">/*侦听端口地址*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 2<span class="comment">/*侦听队列长度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_conn_server</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">ssize_t</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>];<span class="comment">/*数据的缓冲区*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;<span class="comment">/*循环处理过程*/</span></span><br><span class="line"> <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));<span class="comment">/*清空之前的buffer存的数据*/</span></span><br><span class="line">size = <span class="built_in">read</span>(s, buffer, <span class="number">1024</span>);<span class="comment">/*从套接字中读取数据放到缓冲区buffer中*/</span></span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>)&#123;<span class="comment">/*没有数据*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端已经断开了连接&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印收到的客户端的字符串*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;client%d say:%s\n&quot;</span>,s,buffer);</span><br><span class="line"><span class="comment">/*构建响应字符，为接收到客户端字节的数量*/</span></span><br><span class="line"><span class="built_in">sprintf</span>(buffer, <span class="string">&quot;%ld bytes altogether\n&quot;</span>, size);</span><br><span class="line"><span class="built_in">write</span>(s, buffer, <span class="built_in">strlen</span>(buffer)+<span class="number">1</span>);<span class="comment">/*发给客户端,让客户端知道服务器端已经收到它的消息*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ss,sc;<span class="comment">/*ss为服务器的socket描述符，sc为客户端的socket描述符*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span><span class="comment">/*服务器地址结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span><span class="comment">/*客户端地址结构*/</span></span><br><span class="line"><span class="keyword">int</span> err;<span class="comment">/*返回值*/</span></span><br><span class="line"><span class="keyword">pid_t</span> pid;<span class="comment">/*分叉的进行ID*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*建立一个流式套接字*/</span><span class="comment">/*创建监听的套接字*/</span></span><br><span class="line">ss = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(ss &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置服务器地址*/</span><span class="comment">/*绑定本地的IP port*/</span></span><br><span class="line"><span class="built_in">bzero</span>(&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));<span class="comment">/*清零*/</span></span><br><span class="line">server_addr.sin_family = AF_INET;<span class="comment">/*协议族*/</span></span><br><span class="line">server_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">/*转换成大端*/</span><span class="comment">/*本地地址*/</span></span><br><span class="line">server_addr.sin_port = <span class="built_in">htons</span>(PORT);<span class="comment">/*服务器端口*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*绑定地址结构到套接字描述符*/</span></span><br><span class="line">err = <span class="built_in">bind</span>(ss, (struct sockaddr*)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置侦听*/</span></span><br><span class="line">err = <span class="built_in">listen</span>(ss, BACKLOG);<span class="comment">/*监听的文件描述符,同时能够检测到连接的最大数*/</span></span><br><span class="line"><span class="keyword">if</span>(err &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;listen error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主循环过程*/</span></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line"><span class="keyword">socklen_t</span> addrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(struct sockaddr);</span><br><span class="line"></span><br><span class="line">sc = <span class="built_in">accept</span>(ss, (struct sockaddr*)&amp;client_addr, &amp;addrlen); <span class="comment">//第二个参数是一个结构体，封装客户端的地址结构，最后一参数是结构体的长度</span></span><br><span class="line"><span class="comment">/*接收客户端连接*/</span></span><br><span class="line"><span class="keyword">if</span>(sc &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">/*结束本次循环*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,process_conn_server,sc);</span><br><span class="line">    <span class="built_in">pthread_detach</span>(tid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(ss);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>io复用select</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LISTEN_QUE 5</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_BUFFER_SIZE 1024</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RT_ERR (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RT_OK  0</span></span><br><span class="line"><span class="comment">//创建套接字的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ipv4_tcp_create_socket</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> listenfd,sockfd,opt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>,<span class="title">client</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> len;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="comment">//创建套接字</span></span><br><span class="line">listenfd = <span class="built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="number">0</span>);<span class="comment">//ipv4，全双工</span></span><br><span class="line"><span class="keyword">if</span>(listenfd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;Create socket fail\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置地址重用</span></span><br><span class="line"><span class="keyword">if</span>((ret = <span class="built_in">setsockopt</span>(listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,<span class="built_in"><span class="keyword">sizeof</span></span>(opt))) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;Error , set socket reuse addr failued\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化服务器端</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">bzero</span>(&amp;server,<span class="built_in"><span class="keyword">sizeof</span></span>(server));</span><br><span class="line">server.sin_family = AF_INET;</span><br><span class="line">server.sin_port = <span class="built_in">htons</span>(SERV_PORT);<span class="comment">//8888</span></span><br><span class="line">server.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//连接所有的客户端</span></span><br><span class="line"> </span><br><span class="line">len = <span class="built_in"><span class="keyword">sizeof</span></span>(struct sockaddr);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">bind</span>(listenfd,(struct sockaddr *)&amp;server,len) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">listen</span>(listenfd,MAX_LISTEN_QUE);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> listenfd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> listenfd,sockfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>,<span class="title">client</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> len;</span><br><span class="line"><span class="keyword">int</span> bytes = <span class="number">0</span>;</span><br><span class="line">fd_set g_rdfs,cur_rdfs;</span><br><span class="line"><span class="keyword">int</span> maxfd;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> buf[MAX_BUFFER_SIZE];</span><br><span class="line"><span class="comment">//获得套接字的极限值</span></span><br><span class="line"><span class="keyword">int</span> client_fd[FD_SETSIZE];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;FD_SETSIZE:%d\n&quot;</span>,FD_SETSIZE);</span><br><span class="line">len = <span class="built_in"><span class="keyword">sizeof</span></span>(struct sockaddr_in);</span><br><span class="line"><span class="comment">//调用创建套接字函数</span></span><br><span class="line">listenfd = <span class="built_in">Ipv4_tcp_create_socket</span>();</span><br><span class="line"><span class="comment">//将c_rdfs清零</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;g_rdfs);</span><br><span class="line"><span class="comment">//将listendfd添加进c_rdfs中</span></span><br><span class="line"><span class="built_in">FD_SET</span>(listenfd,&amp;g_rdfs);</span><br><span class="line">maxfd = listenfd;</span><br><span class="line"><span class="comment">//赋初值</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; FD_SETSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line">client_fd[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cur_rdfs = g_rdfs;<span class="comment">//备份,这个是输出的套接字集合?</span></span><br><span class="line"><span class="comment">//监控套接字</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">select</span>(maxfd + <span class="number">1</span>,&amp;cur_rdfs,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;select error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断监听套接字是否在检测集中</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(listenfd,&amp;cur_rdfs))&#123;</span><br><span class="line"><span class="comment">//接收套接字（返回的是通信套接字）</span></span><br><span class="line"><span class="keyword">if</span>((sockfd = <span class="built_in">accept</span>(listenfd,(struct sockaddr*)&amp;client,(<span class="keyword">socklen_t</span>*)&amp;len)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;accept error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sockfd:%d\n&quot;</span>,sockfd);</span><br><span class="line"><span class="comment">//清除我们添加进去的套接字，以防下次循环再次检测到</span></span><br><span class="line"><span class="built_in">FD_CLR</span>(listenfd,&amp;cur_rdfs);</span><br><span class="line"><span class="comment">//得到最大的套接字的个数</span></span><br><span class="line">maxfd = maxfd &gt; sockfd ? maxfd : sockfd;</span><br><span class="line"><span class="comment">//将通信套接字加入关注的套接字集</span></span><br><span class="line"><span class="built_in">FD_SET</span>(sockfd,&amp;g_rdfs);</span><br><span class="line">            <span class="comment">//下面的for语句整体的作用是找到我们的通信套接字并将它的值赋值给存储套接字的数组</span></span><br><span class="line"><span class="comment">//（大家都应该知道前三个套接字都不是我们的通信套接字，第四个才是）</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; maxfd; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == client_fd[i])&#123;</span><br><span class="line">client_fd[i] = sockfd;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt;= maxfd;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == client_fd[i])&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断cur_rdfs是不是在我们关注的读写套接字中</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(client_fd[i],&amp;cur_rdfs))&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="number">0</span>,MAX_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;read socket :%d\n&quot;</span>,client_fd[i]);</span><br><span class="line"><span class="comment">//如果不是监听套接字我就直接读取数据</span></span><br><span class="line">bytes = <span class="built_in">recv</span>(client_fd[i],buf,MAX_BUFFER_SIZE,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(bytes &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;recv error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> RT_ERR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bytes == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//客户端退出，从我关注的套接字集中把它清掉</span></span><br><span class="line"><span class="built_in">FD_CLR</span>(client_fd[i],&amp;g_rdfs);</span><br><span class="line"><span class="comment">//关闭套接字</span></span><br><span class="line"><span class="built_in">close</span>(client_fd[i]);</span><br><span class="line">client_fd[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印读取到的内容</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>,buf);</span><br><span class="line"><span class="comment">//把客户端发送出数据，发送给客户端</span></span><br><span class="line"><span class="built_in">send</span>(client_fd[i],buf,<span class="built_in">strlen</span>(buf),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888<span class="comment">/*侦听端口地址*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*客户端的处理过程*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process_conn_client</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">ssize_t</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>];<span class="comment">/*数据的缓冲区*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;<span class="comment">/*循环处理过程*/</span></span><br><span class="line">                <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));<span class="comment">/*清空之前的buffer存的数据*/</span></span><br><span class="line"><span class="comment">/*从标准输入中读取数据放到缓冲区buffer中*/</span></span><br><span class="line">size = <span class="built_in">read</span>(<span class="number">0</span>, buffer, <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">if</span>(size &gt; <span class="number">0</span>)&#123;<span class="comment">/*如果读到数据*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">write</span>(s, buffer, size);<span class="comment">/*发送给服务器,之前已经通过connect连接好了，然后就可以开始通信*/</span></span><br><span class="line">size = <span class="built_in">read</span>(s, buffer, <span class="number">1024</span>); <span class="comment">/*从服务器读取数据,注释了以后客户端就不会重复输出了*/</span></span><br><span class="line"><span class="comment">/*write(1, buffer, size);*/</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;server accepted:%s\n&quot;</span>,buffer);<span class="comment">/*写到标准输出*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;服务器端已经断开了连接...\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s;<span class="comment">/*s为socket描述符*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span><span class="comment">/*服务器地址结构*/</span></span><br><span class="line"><span class="comment">/*创建通信的套接字*/</span></span><br><span class="line">s = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">/*建立一个流式套接字 af一个地址描述，type新套接口类型描述，protocol 套接口所用的协议 */</span></span><br><span class="line"><span class="keyword">if</span>(s &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置服务器地址*/</span></span><br><span class="line"><span class="built_in">bzero</span>(&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));<span class="comment">/*清零*/</span></span><br><span class="line">server_addr.sin_family = AF_INET;<span class="comment">/*协议族*/</span></span><br><span class="line">server_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">/*本地地址*/</span></span><br><span class="line">server_addr.sin_port = <span class="built_in">htons</span>(PORT);<span class="comment">/*服务器端口,进行一个主机的连接，可以用127.0.0.1*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*将用户输入的字符串类型的IP地址转为整型,大端模式*/</span></span><br><span class="line"><span class="built_in">inet_pton</span>(AF_INET, argv[<span class="number">1</span>], &amp;server_addr.sin_addr);</span><br><span class="line"><span class="comment">/*连接服务器*/</span></span><br><span class="line"><span class="built_in">connect</span>(s, (struct sockaddr*)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(struct sockaddr));</span><br><span class="line"><span class="built_in">process_conn_client</span>(s);<span class="comment">/*客户端处理过程*/</span></span><br><span class="line"><span class="built_in">close</span>(s);<span class="comment">/*关闭连接,只需要关闭通信套接字，和服务器不一样，服务器要关闭监听和通信套接字*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>web服务器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="comment">//linux 系统上网络相关</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8080<span class="comment">/*侦听端口地址*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备连接，返回服务器的Fd </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initServer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//处理客户端的连接 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handClient</span><span class="params">(<span class="keyword">int</span> fd)</span></span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.实现连接</span></span><br><span class="line"><span class="keyword">int</span> serverFd=<span class="built_in">initServer</span>(); </span><br><span class="line"><span class="keyword">int</span> clientFd; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">caddr</span>;</span></span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="comment">//2.处理请求</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//1.等待客户端连接 </span></span><br><span class="line"><span class="comment">//memset(&amp;caddr,0,size);</span></span><br><span class="line"><span class="keyword">socklen_t</span>  size= <span class="built_in"><span class="keyword">sizeof</span></span>(caddr);</span><br><span class="line">clientFd= <span class="built_in">accept</span>(serverFd,(struct sockaddr*)&amp;caddr,&amp;size); </span><br><span class="line"><span class="keyword">if</span>(clientFd &lt; <span class="number">0</span>)&#123;<span class="comment">/*出错*/</span></span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">/*结束本次循环*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;客户端%d连接服务器了！\n&quot;</span>,clientFd);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,handClient,clientFd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_detach</span>(tid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(serverFd); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//做好连接的准备工作 完成tcp的前四步，并返回服务器的fd </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initServer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.创建 socketFd socket网络套接字 FD是文件描述符</span></span><br><span class="line"><span class="keyword">int</span> fd=<span class="built_in">socket</span>(AF_INET,SOCK_STREAM,<span class="number">0</span>);<span class="comment">//第二个参数是数据类型 流式套接字？ </span></span><br><span class="line"><span class="keyword">if</span> (fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;创建socket失败：&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建socket成功！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不阻塞使用setsockopt函数设置一下fd的工作状态</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">setsockopt</span>(fd,SOL_SOCKET,SO_REUSEADDR,&amp;n,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.设置服务器的协议地址族</span></span><br><span class="line"><span class="comment">//确定服务器 是在哪台电脑上的哪个应用程序</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line"> addr.sin_family=AF_INET;<span class="comment">//与socket函数第一个参数一致 </span></span><br><span class="line"> addr.sin_port=<span class="built_in">htons</span>(PORT);<span class="comment">//所有的浏览器 都是这个端口 浏览器专用80端口</span></span><br><span class="line">       <span class="comment">//htons(8080)小端转大端</span></span><br><span class="line"> addr.sin_addr.s_addr=INADDR_ANY;<span class="comment">//当前电脑上任意网卡都可以  </span></span><br><span class="line"><span class="comment">//3.绑定</span></span><br><span class="line"> <span class="keyword">int</span> r=<span class="built_in">bind</span>(fd,(struct sockaddr*)&amp;addr,<span class="built_in"><span class="keyword">sizeof</span></span>(addr)); </span><br><span class="line"> <span class="keyword">if</span>(r == <span class="number">-1</span>)&#123;</span><br><span class="line"> <span class="built_in">perror</span>(<span class="string">&quot;绑定失败&quot;</span>); </span><br><span class="line"> <span class="built_in">close</span>(fd);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;绑定成功！\n&quot;</span>);</span><br><span class="line"><span class="comment">//4.监听 </span></span><br><span class="line">r= <span class="built_in">listen</span>(fd,<span class="number">10</span>);</span><br><span class="line"> <span class="keyword">if</span>(r == <span class="number">-1</span>)&#123;</span><br><span class="line"> <span class="built_in">perror</span>(<span class="string">&quot;监听失败&quot;</span>); </span><br><span class="line"> <span class="built_in">close</span>(fd);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;监听成功！\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> fd;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handClient</span><span class="params">(<span class="keyword">int</span> fd)</span></span>&#123;</span><br><span class="line"><span class="comment">//接收客户端发来的信息</span></span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">1024</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//1M</span></span><br><span class="line"><span class="keyword">int</span> r=<span class="built_in">read</span>(fd,buff,<span class="built_in"><span class="keyword">sizeof</span></span>(buff));</span><br><span class="line"><span class="keyword">if</span>(r&gt;<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;接收到客户端发来的请求：\n%s\n&quot;</span>,buff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> filename[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sscanf</span>(buff,<span class="string">&quot;GET /%s&quot;</span>,filename);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解析出的文件名为：%s\r\n\r\n&quot;</span>,filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据文件名 得到 文件类型，告诉浏览器 发送什么文件 </span></span><br><span class="line"><span class="keyword">char</span>* mime =<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(filename,<span class="string">&quot;.html&quot;</span>))&#123;</span><br><span class="line">mime=<span class="string">&quot;text/html&quot;</span>;<span class="comment">//文本或者html类型 </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(filename,<span class="string">&quot;.jpg&quot;</span>))&#123;</span><br><span class="line">mime =<span class="string">&quot;image/jpg&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> response[<span class="number">1024</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//响应头 </span></span><br><span class="line"><span class="built_in">sprintf</span>(response,<span class="string">&quot;HTTP/1.1 200 OK \r\nContent-Type:%s\r\n\r\n&quot;</span>,mime);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> responseLen=<span class="built_in">strlen</span>(response);</span><br><span class="line"><span class="keyword">int</span> fileFd = <span class="built_in">open</span>(filename,O_RDONLY);</span><br><span class="line"><span class="keyword">int</span> fileLen= <span class="built_in">read</span>(fileFd,responseLen+response,</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(response)-responseLen);</span><br><span class="line"></span><br><span class="line"><span class="built_in">write</span>(fd,response,responseLen+fileLen);</span><br><span class="line"><span class="built_in">close</span>(fileFd);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2021/11/12/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2021/11/12/%E6%B5%8B%E8%AF%95/</id>
    <published>2021-11-12T13:20:15.000Z</published>
    <updated>2021-11-12T13:25:15.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这是一个test</p><p>我要上传图片啦，希望它不会挂掉。</p><p>一个疑问：为什么刚生成一个md文件的时候 typora不能正常打字</p><img src="https://tva2.sinaimg.cn/large/006qJIWBgy1gwcod25wlfj302l02pmwy.jpg" alt="4E}1F5]045EV)P42(ZG7CF7" width="93" data-width="93" data-height="97">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>好想去看雪</title>
    <link href="http://example.com/2021/11/08/%E5%A5%BD%E6%83%B3%E5%8E%BB%E7%9C%8B%E9%9B%AA/"/>
    <id>http://example.com/2021/11/08/%E5%A5%BD%E6%83%B3%E5%8E%BB%E7%9C%8B%E9%9B%AA/</id>
    <published>2021-11-08T05:20:25.000Z</published>
    <updated>2021-11-08T17:14:01.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>I’m so glad you made time to see me</p><p>How’s life, tell me how’s your family</p><p>I haven’t seen them in a while</p><p>You’ve been good, busier than ever</p><p>We small talk, work and the weather</p><p>Your guard is up and I know why</p><p>Because the last time you saw me is still burned in the back of your mind</p><p>You gave me roses and I left them there to die</p><p>So this is me swallowing my pride</p><p>Standing in front of you saying I’m sorry for that night</p><p>And I go back to December all the time</p><p>It turns out freedom ain’t nothing but missing you</p><p>Wishing I’d realized what I had when you were mine</p><p>I go back to December, turn around and make it alright</p><p>I go back to December all the time</p><p>These days I haven’t been sleeping</p><p>Staying up playing back myself leaving</p><p>When your birthday passed and I didn’t call</p><p>Then I think about summer, all the beautiful times</p><p>I watched you laughing from the passenger side</p><p>And realized I loved you in the fall</p><p>And then the cold came, the dark days when fear crept into my mind</p><p>You gave me all your love and all I gave you was goodbye</p><p>So this is me swallowing my pride</p><p>Standing in front of you saying I’m sorry for that night</p><p>And I go back to December all the time</p><p>It turns out freedom ain’t nothing but missing you</p><p>Wishing I’d realized what I had when you were mine</p><p>I go back to December,</p><p>turn around and change my own mind</p><p>I go back to December all the time</p><p>I miss your tan skin, your sweet smile,</p><p>so good to me, so right</p><p>And how you held me in your arms that September night</p><p>The first time you ever saw me cry</p><p>Maybe this is wishful thinking</p><p>Probably mindless dreaming</p><p>But if we loved again, I swear I’d love you right</p><p>I’d go back in time and change it, but I can’t</p><p>So if the chain is on your door I understand</p><p>But this is me swallowing my pride</p><p>Standing in front of you saying I’m sorry for that night</p><p>And I go back to December</p><p>It turns out freedom ain’t nothing but missing you</p><p>Wishing I’d realized what I had when you were mine</p><p>I go back to December turn around and make it alright</p><p>I go back to December,</p><p>turn around and change my own mind</p><p>I go back to December all the time</p><p>All the time</p><hr><p>以上，分享一首很有冬天氛围的歌《Back To December》</p><p>就，看到北方同学的雪景图，突然就好想去看雪！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
